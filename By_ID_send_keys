import unittest
import HtmlTestRunner
from time import sleep
from selenium import webdriver
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.firefox import GeckoDriverManager
from webdriver_manager.microsoft import IEDriverManager


class FormAutomationTest(unittest.TestCase):

    def setUp(self):
        # Set up the browser driver based on the specified browser_name
        if self.browser_name.lower() == 'chrome':
            self.driver = webdriver.Chrome(executable_path=ChromeDriverManager().install())
        elif self.browser_name.lower() == 'firefox':
            self.driver = webdriver.Firefox(executable_path=GeckoDriverManager().install())
        elif self.browser_name.lower() == 'ie' or self.browser_name.lower() == 'internet explorer':
            self.driver = webdriver.Ie(executable_path=IEDriverManager().install())
        else:
            raise ValueError("Invalid browser name. Please use 'chrome', 'firefox', or 'ie'/'internet explorer'.")

        self.driver.maximize_window()
        self.driver.get('https://formy-project.herokuapp.com/form')

    def test_fill_form_by_ID(self):
        # Find and fill the first name field
        first_name = self.driver.find_element(By.ID, 'first-name')
        first_name.send_keys('Bogdan')
        sleep(1)

        # Find and fill the last name field
        last_name = self.driver.find_element(By.ID, 'last-name')
        last_name.send_keys('Ion')
        sleep(3)

    def tearDown(self):
        # Close the browser after the test
        self.driver.quit()


if __name__ == "__main__":
    # Specify the browser name here: 'chrome', 'firefox', or 'ie'/'internet explorer'
    browser_name = 'firefox'

    # Set the browser_name as an attribute for the test class
    setattr(FormAutomationTest, 'browser_name', browser_name)

    # Load the test cases from the test class
    suite = unittest.TestLoader().loadTestsFromTestCase(FormAutomationTest)

    # Define the HTMLTestRunner
    runner = HtmlTestRunner.HTMLTestRunner(output=".", report_name="by_ID_report", add_timestamp=False)

    # Run the tests and generate the HTML report
    runner.run(suite)
